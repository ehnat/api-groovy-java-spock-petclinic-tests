buildscript {
    ext {
        lombokVersion = '1.18.18'
        logbackVersion = '1.2.3'
    }
}

plugins {
    id 'groovy'
    id 'java'
}

group 'com.petclinic'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    compileOnly "org.projectlombok:lombok:$lombokVersion"

    implementation 'org.codehaus.groovy:groovy-all:2.5.14'
    implementation 'io.rest-assured:rest-assured:3.3.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.1'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'org.aeonbits.owner:owner:1.0.12'

    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5', {
        exclude module: 'groovy-all'
    }
    testImplementation 'com.athaydes:spock-reports:1.8.0'
    testImplementation 'com.anotherchrisberry:spock-retry:0.6.5'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testCompile "ch.qos.logback:logback-core:$logbackVersion"
    testCompile "ch.qos.logback:logback-classic:$logbackVersion"
}

Map<String, String> ENVIRONMENT_TO_DEFAULT_TEST_GROUPS_MAP = [
        'default-regression': 'regression',
        'default-smoke'     : 'smoke'
]

test {
    testLogging.showStandardStreams = true
    systemProperties System.properties

    doFirst {
        def DEFAULT_ENVIRONMENT_TEST_GROUPS = 'default-regression'
        def ENVIRONMENT_PROPERTY_NAME = 'env'
        def TEST_GROUPS_PROPERTY_NAME = 'testGroups'

        def chosenEnvironmentAndTestGroups = System.getProperty(ENVIRONMENT_PROPERTY_NAME) ?: DEFAULT_ENVIRONMENT_TEST_GROUPS

        if (!ENVIRONMENT_TO_DEFAULT_TEST_GROUPS_MAP.containsKey(chosenEnvironmentAndTestGroups)) {
            throw new InvalidUserDataException(
                    "Invalid configuration (environment - tests category): $chosenEnvironmentAndTestGroups. Supported Configurations: ${ENVIRONMENT_TO_DEFAULT_TEST_GROUPS_MAP.keySet()}" as String
            )
        }

        println "Chosen test configuration (environment - tests category): '$chosenEnvironmentAndTestGroups'"
        systemProperty ENVIRONMENT_PROPERTY_NAME, chosenEnvironmentAndTestGroups

        def chosenTestGroups = System.getProperty(TEST_GROUPS_PROPERTY_NAME) ?: ENVIRONMENT_TO_DEFAULT_TEST_GROUPS_MAP[chosenEnvironmentAndTestGroups]
        println "Chosen tests categories: '$chosenTestGroups'"
        systemProperty TEST_GROUPS_PROPERTY_NAME, chosenTestGroups

        TestGroups testGroupsResolver = new TestGroups(chosenTestGroups)

        useJUnit {
            includeCategories testGroupsResolver.includedGroups()
            excludeCategories testGroupsResolver.excludedGroups()
        }
    }
}
